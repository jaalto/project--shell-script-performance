FILE: t-array-split-string.bash
# Q: split string into array: read vs eval?
# A: eval is 5x faster

FILE: t-call-function-and-return-value.bash
# Q: Bash name ref to return values vs val=$(funcall)
# A: name ref is about 40x faster

FILE: t-command-grep.sh
# Q: In grep, is --fixed-strings faster?
# A: Not much difference to --extended-regexp or --perl-regexp
# Q: Is using parallel(1) with grep even faster?
# A: Not worth for small files. Yes with bigger ones (test file: 10 000 lines)

FILE: t-dir-empty.sh
# Q: What is the fastest way to check empty directory?
# A: array+glob is faster than built-in compgen

FILE: t-dir-entries.sh
# Q: Fastest to get list of dirs: for vs compgen vs ls -d
# A: In general, simple ls(1) will do fine. No big differences.

FILE: t-file-copy-check-exist.sh
# Q: Need a copy of file. Call cp(1), make hardlink, or do test before copy?
# A: Faster is to test existense of file before cp(1). Hardlink is fast.

FILE: t-file-for-loop-vs-awk.sh
# Q: for-loop to send file-by-file to awk vs awk handling all the files?
# A: pure awk is at least 2x faster

FILE: t-file-glob-bash-compgen-vs-stat.sh
# Q: The check if GLOB matches file: stat or Bash compgen?
# A: Bash array+glob/compgen are much faster than stat(1)

FILE: t-file-grep-vs-match-in-memory.sh
# Q: To check file for matches: repeat read, inline match or grep(1)?
# A: Fastest is to read file once into memory and then match

FILE: t-file-newest-in-dir.sh
# Q: What is the fastest way to get newest file in directory
# A: find + awk is tad faster but more complex. Use find + filters.

FILE: t-file-pipe-vs-process-substitution.sh
# Q: Would pipe be slower than using process substitution?
# A: No real difference. Pipes are efficient.

FILE: t-file-read-cat-vs-bash.sh
# Q: Is Bash $(< FILE) faster than $(cat FILE)?
# A: The $(< FILE) is about 2x faster for small files

FILE: t-file-read-content-loop.sh
# Q: Fastest to process lines: readarray vs 'while read < file' ?
# A: readarray/mapfiles+for is 2x faster than 'while read < file'

FILE: t-file-read-match-lines-loop-vs-grep.sh
# Q: Will prefilter grep + loop help compared to straight loop?
# A: Yes, using external grep + loop is 2x faster

FILE: t-file-read-shell-result.sh
# Q: Is capturing var=$() faster or using temporary file for outpur?
# A: The var=$() is 2x faster than using a temporary file

FILE: t-file-read-with-size-check.sh
# Q: Is "test -s" for size useful before reading the file content?
# A: yes, much faster to check [ -s file ] before reading.

FILE: t-file-size-info.sh
# Q: What is the fastest way to read a file's size?
# A: GNU wc -c. Or stat() but it is not in POSIX (not portable)

FILE: t-lib.sh
FILE: t-statement-arithmetic-comparison.sh
# Q: POSIX [ a -gt b ] vs Bash [[ a -gt b ]] and (( a > b ))
# A: No noticeable difference

FILE: t-statement-arithmetic-for-loop.sh
# Q: for-loop: ((...)) vs {1..N} vs $(seq N) vs POSIX i++
# A: The {1..N} and $(seq N) are very fast.

FILE: t-statement-arithmetic-increment.sh
# Q: POSIX 'i=$((i + 1))' vs ((i++)) vs let i++ etc.
# A: No noticeable difference

FILE: t-statement-statement-if-test-posix-vs-bash.sh
# Q: POSIX [ $var = 1 ] vs Bash [[ $var = 1 ]] etc
# A: In practise, not much difference

FILE: t-string-trim-whitespace.sh
# Q: Trim whitepace using Bash RE vs sed(1)
# A: Bash is much faster; especially with fn() name ref

